
 **********************************
 ****** ReactNative开发环境配置 ******
 **********************************

一、安装brew
    ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"

二、安装node、watchman
    1、如果之前使用pkg方式安装过nodejs可使用uninstall_nodejs.sh卸载
    2、安装node：（卸载可使用 brew uninstall node）
	brew install node --within-npm
	创建链接：（移除链接：brew unlink node）
	brew link node
    3、安装watchman（可选）
	brew install watchman

三、安装react-native-cli
    sudo chown -R '當前用戶' /usr/local
    npm install -g react-native-cli

    参考链接：
	https://facebook.github.io/react-native/docs/getting-started.html


 ********************
 ****** 运行问题 ******
 ********************

一、main.jsbundle缺失
   react-native bundle --entry-file [js文件路径] --platform ios --bundle-output [main.jsbundle路径]

二、jsCodeLocation路径缺失
   方法一：使用本地main.jsbundle
   方法二：使用本地URL：http://[本机IP]:8081/index.ios.bundle?platform=ios&dev=true

 **************************
 ****** iOS组件自定义 ******
 **************************

   自定义组件分为界面组件和无界面组件，可参考react-native现有组件。

   参考链接：
   http://www.cocoachina.com/ios/20160510/16174.html

 *************************
 ****** 组件发布及使用 ******
 *************************

一、package.json

   package.json包含了module的所有信息，比如名称、版本、描述、依赖、作者、license等。
   使用npm init编辑package.json。与发布相关的重要设置有：name、author。

二、发布到npm社区

   npm set registry https://registry.npmjs.org/  /* 使用npm社区 */
   npm adduser  /* 注册npm社区账号 等同于【 npm adduser --registry=https://registry.npmjs.org 】，npm认证信息存储路径：~/.npmrc ，*/
   npm whoami   /* 查看npm当前registry用户 等同于【 npm whoami --registry=https://registry.npmjs.org 】*/
   npm publish  /* 根据package.json配置发布到npm社区 */
   npm unpublish [<@scope>/]<pkg>[@<version>] /* 撤回发布到npm社区的组件 */

三、部署发布私有npm

   1、部署私有npm：sinopia
      npm install sinopia -g   /* 安装sinopia */
      设置sinopia IP及端口：在config.yaml最后添加【 listen: 10.118.45.141:8887 】
      sinopia  /* 启动sinopia后打印出config.yaml配置文件路径(同目录下的htpasswd文件存储已注册账号)，同时可访问 http://10.118.45.141:8887 */

   2、发布私有npm
      npm set registry http://10.118.45.141:8887/  /* 使用私有npm */
      npm adduser  /* 注册私有npm账号 等同于【 npm adduser --registry=http://10.118.45.141:8887 】，npm认证信息存储路径：~/.npmrc ，*/
      npm whoami   /* 查看npm当前registry用户 等同于【 npm whoami --registry=http://10.118.45.141:8887 】*/
      npm publish  /* 根据package.json配置发布到私有npm */
      npm unpublish [<@scope>/]<pkg>[@<version>] /* 撤回发布到npm社区的组件 */

   3、权限控制
      1）、scope设置：在组件package.json的name属性头部添加 @xxx/。（@sgs/custom_component 表示 SGS下属自定义组件）

      2）、访问和发布权限控制(package.json的packages下)：

         配置文件实例如下：
         packages:
             '@sgs/*':
                 access: $authenticated
                 publish: admin user1 user2
             '*':
                 access: $all
                 publish: $authenticated
                 proxy: npmjs

         每一个命名过滤器(filter)下都有三项基本设置：
            access: 表示哪一类用户可以对匹配的项目进行安装(install)
            publish: 表示哪一类用户可以对匹配的项目进行发布(publish)
            proxy: 如其名，这里的值是对应于 uplinks 的

         对于access和publish的值，我们通常有以下一些可选的配置：
            $all 表示所有人都可以执行对应的操作
            $authenticated 表示只有通过验证的人可以执行对应操作
            $anonymous 表示只有匿名者可以进行对应操作（通常无用）
            或者也可以指定对应于之前我们配置的用户表 htpasswd 中的一个或多个用户，这样就明确地指定哪些用户可以执行匹配的操作

         所以，上面 packages 的配置文件可以解读为：
            验证过的用户可以安装 @sgs 下的包
            名为 admin 或 user1 的用户可以发布 @sgs 下的包
            所有人都可以获取到非 @sgs 下的包
            验证过的用户可以发布非 @sgs 下的包

         sinopia -c config.yml /* 应用配置 */

四、使用组件

   npm install [<@scope>/]<pkg>[@<version>]          /* 安装 */
   npm uninstall [<@scope>/]<pkg>[@<version>]        /* 卸载 */
   react-native link [<@scope>/]<pkg>[@<version>]    /* 应用配置 */
   react-native unlink [<@scope>/]<pkg>[@<version>]  /* 移除配置 */

   参考链接：
   https://docs.npmjs.com/files/package.json
   http://le0zh.github.io/2016/10/19/private-npm-service-via-sinopia/
   http://mp.weixin.qq.com/s?__biz=MzA5Nzk5MzE3Ng==&mid=401510872&idx=1&sn=5633c05b0abef3f3523f541666002ff1#rd
   http://www.cnblogs.com/LittleSix/p/6053549.html


 **************************
 ****** 热更新环境配置 ******
 **************************

一、使用微软CodePushServer

使用CodePush之前首先要安装CodePush客户端。

   1、安装CodePush

      npm install -g code-push-cli

   2、注册CodePush账号

      执行下方命令，浏览器会自动打开注册页面进行授权，授权成功会展示"access key"，复制此key到终端即可完成注册。

      code-push register

      登录成功后，session文件将会写在 /Users/你的用户名/.code-push.config中，至此 CodePush客户端配置完成。

      code-push login


   涉及到的指令：
   npm install -g code-push-cli   /* 安装CodePush客户端 */

   code-push -v                   /* 查看已安装的codepush版本 */

   code-push register             /* 注册codepush账号 */

   code-push login                /* 登录 */

   code-push loout                /* 注销 */

   code-push access-key ls        /* 列出登陆的token */

   code-push access-key rm <accessKye>    /* 删除某个 access-key */


   3、在CodePush服务器注册APP（项目）

      执行下方命令，让CodePush关联到需要热更新的APP。

      code-push app add <AppName>


   涉及到的指令：
   code-push app add <AppName>    /* 在账号里面添加一个新的app */

   code-push app rm <AppName>     /* 在账号里移除一个app */

   code-push app rename <AppName> /* 重命名一个存在app */

   code-push app ls               /* 列出账号下面的所有app */

   code-push app transfer         /* 把app的所有权转移到另外一个账号 */

   4、集成CodePush SDK到项目中（iOS）

      在项目根目录执行下方命令

         npm install --save react-native-code-push  /* 拉取react-native-code-push到node_module目录中 */
         react-native link react-native-code-push   /* 将react-native-code-push配置到当前RN项目 */

   5、项目代码中配置CodePush插件

      1）配置Deployment Key（这里使用Staging环境）

         执行下方命令获取 Staging key，复制 Staging 的值。在 info.plist 中添加 CodePushDeploymentKey 键，将此值填入。

         code-push deployment ls <AppName> --displayKeys

      2）配置CodePush入口

         热更新时需要以 release 方式运行。

         OC中：

         #import "CodePush.h"

         #ifdef DEBUG
             jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
         #else
             jsCodeLocation = [CodePush bundleURL];
         #endif

         JS中父组件的 componentDidMount 方法中：

         import codePush from "react-native-code-push";

         componentDidMount(){
            codePush.sync();
         }

      3）杂项配置

         将 info.plist 中 Bundle versions string, short 值改成 1.0.0 格式。
         将 项目Target->Build Version空值改为 1

   6、react native 打包及发布

      准备工作：将打包后的build目录手动添加到项目中   <!-- 待验证 ：？这个步骤可能只适用于 RN专用方式 的打包发布-->

      根据执行命令差异分为通用和RN专用。

      1）通用方式：使用code-push-cli自动打包并发布

         code-push release-react <AppName> <Platform>

         例如：code-push release-react CodePushDemoApp ios

      2）RN专用方式：打包和发布分开执行

         使用react-native-cli打包。

         react-native bundle --platform      /* 平台ios或android */
                             --entry-file    /* 入口JS文件路径 */
                             --bundle-output /* 用于输出的bundle目录路径 */
                             --assets-dest   /* 用于输出的assets目录路径 */
                             --dev           /* true或false */
                             ...

         例如：
         react-native bundle --entry-file index.ios.js
                             --platform ios
                             --bundle-output ./ios/bundle/index.ios.jsbundle
                             --assets-dest ./ios/bundle/assets
                             --dev true


         使用code-push-cli发布。

         code-push release <AppName> <updateContents> <targetBinaryVersion>
         [--mandatory]
         ...

         例如：
         code-push release TestProject-ios ./ios/bundle/ "1.0.0" --mandatory


      参考链接：
      http://www.jianshu.com/p/19f23d66286f
      http://microsoft.github.io/code-push/docs/getting-started.html
      react-native bundle完整命令参数：
           https://github.com/facebook/react-native/blob/master/local-cli/bundle/bundleCommandLineArgs.js#L27
      code-push-cli使用说明：
           https://www.npmjs.com/package/code-push-cli

二、使用私有CodePushServer（基于code-push-server）


   1、配置code-push-server

      1）安装MySQL

         MySQL下载地址：https://dev.mysql.com/downloads/mysql/5.6.html#downloads

         设置MySQL密码：
         cd /usr/local/mysql/bin                  /* 进入MySQL目录 */
         ./mysql -u root -p                       /* 登录root用户 */
         set password = password('输入你的新密码');  /* 引号不能省略 */

         启动MySQL服务：
         在系统与偏好设置->MySQL图标->Start MySQL Server

      2）安装code-push-server

         安装code-push-server：
         npm install code-push-server -g

         进入code-push-server目录：
         cd /usr/local/lib/node_modules/code-push-server

         修改 config/config.js 文件，对应自己的用户名、密码及数据库名称：

         db: {
            username: "root",
            password: "123456",
            database: "codepush",
            host: "127.0.0.1",
            port: 3306,
            dialect: "mysql"
         }

         初始化code-push-server数据库：
         ./bin/db init --dbhost localhost --dbuser root --dbpassword 123456

         修改code-push-server存储配置（以local为例）：

         local: {
            storageDir: "/Users/luozhong/work/reactNative/server/storage", /* 对应本地路径 */
            downloadUrl: "http://10.118.45.141:3000/download"              /* 对应本机IP */
         }

         common: {
            dataDir: "/Users/luozhong/work/reactNative/server/data", /* 对应本地路径 */
            storageType: "local"              /* 选择存储类型，目前支持local和qiniu配置 */
         }

         启动服务：
         执行  ./bin/www  或   code-push-server
         可在浏览器输入 http://127.0.0.1:3000 查看，默认用户名密码是 admin 123456

      3）关联code-push与code-push-server

         检查code-push当前有无登录，如果有则注销：
         code-push whoami
         code-push logout

         执行登录指令，浏览器会自动打开本地服务登录页面，命令行中会提示输入key，执行下方命令：

         code-push login http://localhost:3000

         输入账号和密码 admin 123456 登录后点击按钮 获取token 并复制token到命令行中，并回车确认，完成登录。


      参考链接：
      https://github.com/lisong/code-push-server

   2、在CodePush服务器注册APP（项目）

      执行下方命令，让CodePush关联到需要热更新的APP。

      code-push app add <项目名-ios>  /* 项目名+ios/android后缀 */


   涉及到的指令：
   code-push app add <AppName>    /* 在账号里面添加一个新的app */

   code-push app rm <AppName>     /* 在账号里移除一个app */

   code-push app rename <AppName> /* 重命名一个存在app */

   code-push app ls               /* 列出账号下面的所有app */

   code-push app transfer         /* 把app的所有权转移到另外一个账号 */

   3、集成CodePush SDK到项目中（iOS）

      在项目根目录执行下方命令

      npm install --save react-native-code-push  /* 拉取react-native-code-push到node_module目录中 */
      react-native link react-native-code-push   /* 将react-native-code-push配置到当前RN项目 */

   4、项目代码中配置CodePush插件

      1）配置Deployment Key（这里使用Staging环境）和 CodePushServerURL

         在 info.plist 中添加 CodePushDeploymentKey 键，值为 执行下方命令获取Deployment Key下Staging 的值。

         code-push deployment ls <AppName> --displayKeys

         在 info.plist 中添加 CodePushServerURL 键，值为：code-push-server地址

         例如：http://localhost:3000

      2）配置CodePush入口

         热更新时需要以 release 方式运行。

         OC中：

         #import "CodePush.h"

         #ifdef DEBUG
            jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
         #else
            jsCodeLocation = [CodePush bundleURL];
         #endif

         JS中父组件的 componentDidMount 方法中：

         import codePush from "react-native-code-push";

         componentDidMount(){
            codePush.sync();
         }

      3）杂项配置

         将 info.plist 中 Bundle versions string, short 值改成 1.0.0 格式。
         将 项目Target->Build Version空值改为 1


   5、react native 打包及发布

      1）通用方式   <!-- 验证未通过  -->

         code-push release-react <AppName> <Platform>

         例如：code-push release-react CodePushDemoApp-ios ios

      2）RN专用方式

         提前准备bundle输出目录：

         mkdir CodePush

         使用react-native-cli打包。

         react-native bundle --platform      /* 平台ios或android */
         --entry-file    /* 入口JS文件路径 */
         --bundle-output /* 用于输出的bundle目录路径 */
         --assets-dest   /* 用于输出的assets目录路径 */
         --dev           /* true或false */
         ...

         例如：
         react-native bundle --platform ios
                             --entry-file index.ios.js
                             --bundle-output ./CodePush/main.jsbundle
                             --assets-dest ./CodePush
                             --dev true


         使用code-push-cli发布。

         code-push release <AppName> <updateContents> <targetBinaryVersion>
         [--mandatory]
         ...

         例如：
         code-push release CodePushDemoApp-ios ./CodePush "1.0.0" --mandatory


      参考链接：
      http://www.jianshu.com/p/eb7fdee307dc
      http://www.jianshu.com/p/19f23d66286f
      http://microsoft.github.io/code-push/docs/getting-started.html
      react-native bundle完整命令参数：
      https://github.com/facebook/react-native/blob/master/local-cli/bundle/bundleCommandLineArgs.js#L27
      code-push-cli使用说明：
      https://www.npmjs.com/package/code-push-cli


